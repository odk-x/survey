/**************************************************************************************************
                                        GRADLE CONFIG
 *************************************************************************************************/

if ((new File(gradle.local)).exists()) {
    apply from: gradle.local
} else {
    apply from: gradle.remote
}

applicationScripts.each {
    apply from: it
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

android {
    // The following are set in the common.gradle file
    compileSdkVersion(compileVersion)
    buildToolsVersion(buildTools)

    defaultConfig {
        applicationId(groupId + surveyName)
        minSdkVersion(minVersion)
        targetSdkVersion(targetVersion)
        versionCode(releaseVersionCode)
        versionName(versionCodeName)
        testInstrumentationRunner(instrumentationRunner)
    }

    flavorDimensions "stage", "testing"

    productFlavors {
        demo {
            dimension 'stage'
        }

        master {
            dimension 'stage'
        }

        snapshot {
            dimension 'stage'
        }

        basic {
            dimension 'testing'
        }

        uitest {
            minSdkVersion(uitestMinSDK)
            dimension 'testing'
        }
    }

    signingConfigs {
        release {
            if (shouldSign) {
                storeFile file(signStoreFilePath)
                storePassword signStorePass
                keyAlias signKeyAlias
                keyPassword signKeyPass
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled(minify)
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'

            if (shouldSign) {
                signingConfig signingConfigs.release
            }
        }
        debug {
            debuggable(true)
            testCoverageEnabled(testCoverage) // Allows AndroidTest JaCoCo reports to be generated
        }
    }

    dexOptions {
        javaMaxHeapSize "2g"
    }

    packagingOptions { // Pick first occurrence of any files that cause conflicts, as defined in common.gradle
        packageList.each {
            pickFirst it
        }
    }

    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }
}

configurations.all {
  resolutionStrategy {
    cacheDynamicVersionsFor(0, 'seconds')
    cacheChangingModulesFor(0, 'seconds')
  }
}

allprojects {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
    }
}

dependencies {
    implementation fileTree(include: '*.jar', dir: 'libs')
    implementation 'com.android.support:support-annotations:27.0.2'
    implementation 'com.android.support:support-v13:27.0.2'
    implementation 'com.google.firebase:firebase-core:11.6.2'
    implementation('com.crashlytics.sdk.android:crashlytics:2.8.0@aar') {
        transitive = true;
    }
    if (libraryProjectPath.exists() && gradle.useLocal) { // Local project is favoured
        implementation project(libraryProjectName)
    } else {
        demoImplementation(group: groupId, name: libraryDemoArtifactName, classifier: demoRelease,
                version: latestVersion, ext: 'aar')
        masterImplementation(group: groupId, name: libraryMasterArtifactName, classifier: masterRelease,
                version: masterArtifactVersion, ext: 'aar')
        snapshotImplementation(group: groupId, name: librarySnapshotArtifactName,
                classifier: snapshotRelease, version: latestVersion, ext: 'aar')
    }
    if (commonProjectPath.exists() && gradle.useLocal) { // Local project is favoured
        implementation project(commonProjectName)
    } else {
        demoImplementation(group: groupId, name: commonDemoArtifactName, classifier: demoRelease,
                version: latestVersion, ext: 'aar')
        masterImplementation(group: groupId, name: commonMasterArtifactName, classifier: masterRelease,
                version: masterArtifactVersion, ext: 'aar')
        snapshotImplementation(group: groupId, name: commonSnapshotArtifactName,
                classifier: snapshotRelease, version: latestVersion, ext: 'aar')
    }
    // Testing dependencies
    testCompile 'junit:junit:4.12'
    androidTestCompile 'com.android.support.test:runner:1.0.1'
    androidTestCompile 'com.android.support:support-annotations:27.0.2'
}
