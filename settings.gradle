gradle.ext.gradleConfigVersion = 156

if (!gradle.ext.has('workspacePath')) {
    logger.warn("rootDir: " + rootDir.getAbsolutePath());
    gradle.ext.workspacePath = rootDir.getParentFile().getAbsolutePath();
}

logger.warn('survey/settings.gradle -- gradle.ext.workspacePath: ' + gradle.ext.workspacePath)

gradle.ext.local = gradle.ext.workspacePath + '/gradle-config/remote.gradle'
gradle.ext.remote = 'https://raw.githubusercontent.com/opendatakit/gradle-config/' + gradle.ext.gradleConfigVersion + '/remote.gradle'
gradle.ext.useLocal = true // set to false to always build against remote artifacts

if ((new File(gradle.ext.local)).exists()) {
    gradle.ext.useLocalPaths = true
    apply from: gradle.ext.local
} else {
    gradle.ext.useLocalPaths = false
    apply from: gradle.ext.remote
}

settingsScripts.each {
    apply from: it
}

include(surveyProjectChild)

if (libraryProjectPath.exists() && gradle.ext.useLocal) { // check if local library project is present
    if (!ext.librarySubProjectDictory.exists()) {
        ext.librarySubProjectDictory.mkdirs()
    }
	include libraryProjectName
    project(libraryProjectName).setProjectDir(libraryProjectPath) // set local location
}

if (commonProjectPath.exists() && gradle.ext.useLocal) { // check if local common project is present
    if (!ext.commonSubProjectDictory.exists()) {
        ext.commonSubProjectDictory.mkdirs()
    }
	include commonProjectName
    project(commonProjectName).setProjectDir(commonProjectPath) // set local location
}
